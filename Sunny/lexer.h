#ifndef LEXER_H
#define LEXER_H

#include <string>
#include <vector>

enum TokenType {
    TOKEN_EQUAL, TOKEN_LOGICAL_OR, TOKEN_LOGICAL_AND, TOKEN_EQUAL_EQUAL,
    TOKEN_GREATER, TOKEN_GREATER_EQUAL, TOKEN_LESS, TOKEN_LESS_EQUAL,
    TOKEN_BANG_EQUAL, TOKEN_COLON, TOKEN_TENARY,
    TOKEN_ADD_ASS, TOKEN_SUB_ASS, TOKEN_SLASH_ASS, TOKEN_STAR_ASS,
    TOKEN_ASS_OR, TOKEN_ASS_XOR, TOKEN_ASS_AND,
    TOKEN_BIT_OR, TOKEN_BIT_XOR, TOKEN_BIT_AND,
    TOKEN_SHIFT_LEFT, TOKEN_SHIFT_RIGHT, TOKEN_INVERSE,
    TOKEN_PLUS, TOKEN_SUB, TOKEN_SLASH, TOKEN_MODULUS, TOKEN_STAR,
    TOKEN_BANG, TOKEN_SUB_SELF, TOKEN_ADD_SELF,
    TOKEN_LEFT_PAREN, TOKEN_RIGHT_PAREN,
    TOKEN_LEFT_BRACE, TOKEN_RIGHT_BRACE,
    TOKEN_COMMA, TOKEN_DOT, TOKEN_SEMICOLON,
    TOKEN_START, TOKEN_END,
    TOKEN_BOOL, TOKEN_VAR, TOKEN_STRINGVAR,
    TOKEN_IDENTIFIER, TOKEN_STRING, TOKEN_NUMBER,
    TOKEN_PIN, TOKEN_FALSE, TOKEN_TRUE, TOKEN_FUNCALL,
    TOKEN_OUTPUT, TOKEN_ENDL,
    TOKEN_INFINITE, TOKEN_FUN,
    TOKEN_VOID, TOKEN_LEFT_BLOCK, TOKEN_RIGHT_BLOCK,
    TOKEN_BREAK, TOKEN_CONTINUE, TOKEN_SWITCH,
    TOKEN_CASE, TOKEN_DEFAULT, TOKEN_ELSE,
    TOKEN_FOR, TOKEN_IF, TOKEN_NIL,
    TOKEN_PRINT, TOKEN_RETURN,
    TOKEN_UNKNOWN
};

struct Token {
    TokenType type;
    std::string lexeme;
    int line;
};

// Scans input string and returns vector of tokens
std::vector<Token> scan(const std::string& input);

#endif // LEXER_H
